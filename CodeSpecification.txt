命名约定
1.1通用命名规则：函数命名、变量命名、文件命名应具有描述性，不要过度缩写，类型和变量应该是名词，函数名可以用命令性动词。
1.2变量：
1) 以名词作为变量名，变量名一律小写，单词间以下划线相连
2) 局部变量：全小写字母，下划线分割
        例: string table_name;
3) 类成员变量: 全小写字母，下划线分割单词，下划线结尾
        例: string table_name_;
4) 结构体成员: 全小写字母，下划线分割
        例: string table_name;
5) 全局变量：尽量不使用全局变量，如果必须使用，需加前缀 g_ ，以区别局部变量
1.3函数：
1) 以动词或动词短语作为函数名
2) 普通函数：每个单词以大写字母开头，后续小写字母，无下划线
        例：void InsertNode()
3) 常用函数：对于读取数据、常用计算，可用小写字母加下划线方法，例：
   int add_num(int input1,int input2){
   return input1+input2;
   }
1.4 宏
1)尽量不要使用宏
2)如果必须用，采用大写字母加下划线命名方式，如：VELOCITY_P
1.5常量，枚举值
1) 以k开头，大小写混合，
        例：const int kDaysInAWeek = 7;
                  enum EnumType {
                           kEnumValue0, kEnumValue1
                  };
注释：
2.1文件注释
例：
/*********************
@版本号：v1.0
@团队：HustSRobot（Hust Focus  Slam Robot)
@作者：姓名
@文件内容描述：
**********************/
2.2函数注释
采用 
/**
@函数名：
@作用：
@输入：
param1: 
param2:
@输出：
*/
如：
/**
@函数名：int add_num
@作用：将两个数相加并返回其和
@输入：
param1:int input1
param2:int input2
@输出：两数之和
*/
格式：
3.1 符合统一风格最重要 3.2 行长度：每行代码字符数不超过80 3.3 尽量不使用非ASCII字符，使用使必须用UTF-8格式 3.4 函数声明和定义

1) 函数参数、逻辑条件、初始化列表：要么所有参数和函数名放在同一行，要么所有参数并排分行；
例：ReturnTypeClassName::FunctionName(Type var1,Type var2) {
        …..
    }
如果同一行文本较多，容不下所有参数：
例：ReturnTypeClassName::FunctionLongName(Type var1,
                                          Type var2) {
2) 返回值、左圆括号总是和函数名在同一行
3) 函数名和左圆括号无空格，圆括号和参数无空格
4) 左大括号总在最后一个参数同一行的末尾
5) 右大括号总是单独位于函数最后一行
6) 右圆括号和左大括号总是有一个空格
7) 所有形参尽可能对齐

3.5 条件语句

1）提倡不在圆括号中添加空格，关键字else另起一行
2）提倡圆括号和条件之间没有空格
例：if (condition) {		//括号内无空格
       …
    } else{			
       …
    }
3.6 逻辑间空行
